import os
import httpx
from fastapi import FastAPI, Request
from fastapi.responses import RedirectResponse, JSONResponse
from dotenv import load_dotenv

load_dotenv()

app = FastAPI()

# Google Config
GOOGLE_CLIENT_ID = os.getenv("GOOGLE_CLIENT_ID")
GOOGLE_CLIENT_SECRET = os.getenv("GOOGLE_CLIENT_SECRET")
GOOGLE_REDIRECT_URI = "http://localhost:8000/auth/google/callback"
GOOGLE_AUTH_URL = "https://accounts.google.com/o/oauth2/v2/auth"
GOOGLE_TOKEN_URL = "https://oauth2.googleapis.com/token"

# Microsoft Config
# MS_CLIENT_ID = os.getenv("MICROSOFT_CLIENT_ID")
MS_CLIENT_ID = "595a854c-fcb7-4a0a-b455-e43c53be19be"
# MS_CLIENT_SECRET = os.getenv("MICROSOFT_CLIENT_SECRET")
MS_CLIENT_SECRET = "qPZ8Q~H_IOL7d58idpj7b093d~VLlbHPcQeOTbLM"
MS_REDIRECT_URI = "http://localhost:8000/auth/outlook/callback"
MS_AUTH_URL = "https://login.microsoftonline.com/common/oauth2/v2.0/authorize"
MS_TOKEN_URL = "https://login.microsoftonline.com/common/oauth2/v2.0/token"

# In-memory token store (replace with DB in production)
tokens = {}

# 1. Google Login
@app.get("/auth/google")
async def google_login():
    url = (
        f"{GOOGLE_AUTH_URL}?response_type=code"
        f"&client_id={GOOGLE_CLIENT_ID}"
        f"&redirect_uri={GOOGLE_REDIRECT_URI}"
        f"&scope=email%20profile%20https://www.googleapis.com/auth/gmail.readonly"
        f"&access_type=offline&prompt=consent"
    )
    return RedirectResponse(url)

# 2. Google Callback
@app.get("/auth/google/callback")
async def google_callback(code: str):
    data = {
        "code": code,
        "client_id": GOOGLE_CLIENT_ID,
        "client_secret": GOOGLE_CLIENT_SECRET,
        "redirect_uri": GOOGLE_REDIRECT_URI,
        "grant_type": "authorization_code"
    }
    async with httpx.AsyncClient() as client:
        resp = await client.post(GOOGLE_TOKEN_URL, data=data)
        token_data = resp.json()
    
    tokens["google"] = token_data
    return JSONResponse({"status": "Google connected", "tokens": token_data})

# 3. Microsoft Login
@app.get("/auth/outlook")
async def outlook_login():
    url = (
        f"{MS_AUTH_URL}?client_id={MS_CLIENT_ID}"
        f"&response_type=code"
        f"&redirect_uri={MS_REDIRECT_URI}"
        f"&response_mode=query"
        f"&scope=offline_access%20User.Read%20Mail.Read"
    )
    return RedirectResponse(url)

# 4. Microsoft Callback
@app.get("/auth/outlook/callback")
async def outlook_callback(code: str):
    data = {
        "client_id": MS_CLIENT_ID,
        "client_secret": MS_CLIENT_SECRET,
        "code": code,
        "redirect_uri": MS_REDIRECT_URI,
        "grant_type": "authorization_code"
    }
    async with httpx.AsyncClient() as client:
        resp = await client.post(MS_TOKEN_URL, data=data)
        token_data = resp.json()
    
    tokens["outlook"] = token_data
    return JSONResponse({"status": "Outlook connected", "tokens": token_data})

# 5. Read Gmail Inbox
@app.get("/gmail/messages")
async def get_gmail_messages():
    access_token = tokens["google"]["access_token"]
    async with httpx.AsyncClient() as client:
        resp = await client.get(
            "https://gmail.googleapis.com/gmail/v1/users/me/messages",
            headers={"Authorization": f"Bearer {access_token}"}
        )
    return resp.json()

# 6. Read Outlook Inbox
@app.get("/outlook/messages")
async def get_outlook_messages():
    access_token = tokens["outlook"]["access_token"]
    async with httpx.AsyncClient() as client:
        resp = await client.get(
            "https://graph.microsoft.com/v1.0/me/messages",
            headers={"Authorization": f"Bearer {access_token}"}
        )
    return resp.json()
